/* Copyright 2021 Simon S.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#include QMK_KEYBOARD_H
#include <stdio.h>

#include "keymap_german.h"
#include "sendstring_german.h"

// Defines names for use in layer keycodes and the keymap
enum layer_names
{
	_one = 0,
	_two,
};

enum custom_keycodes {
    toggle_layer = SAFE_RANGE,
	e_1,
	e_2,
	e_3,
	e_4,
	e_5,
	e_6,
};

const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    /* Base */
[_one] = LAYOUT(
        KC_TRNS, KC_TRNS, TO(1),
        KC_1, KC_2, KC_3,
        KC_MEDIA_PREV_TRACK, KC_MEDIA_PLAY_PAUSE, KC_MEDIA_NEXT_TRACK),
		
[_two] = LAYOUT(
        KC_TRNS, KC_TRNS, TO(0),
        e_1, e_2, e_3,
        e_4, e_5, e_6),
};

bool process_record_user(uint16_t keycode, keyrecord_t *record) {
  switch (keycode) {
    case e_1:
      if (record->event.pressed) {
		SEND_STRING(":kekw:");
      }
      return false; 
    case e_2:
      if (record->event.pressed) {
        SEND_STRING(":kermitwot:");
      }
      return false; 
	 case e_3:
      if (record->event.pressed) {
        SEND_STRING(":think:");
      }
      return false; 
	      case e_4:
      if (record->event.pressed) {
        SEND_STRING(":WIGGLEG:");
      }
      return false; 
	      case e_5:
      if (record->event.pressed) {
        SEND_STRING(":G_Love:");
      }
      return false; 
	      case e_6:
      if (record->event.pressed) {
        SEND_STRING(":G_PANIC:");
      }
	  tap_code(KC_ENTER);
      return false; 
    default:
      return true; // Process all other keycodes normally
  }
}

bool encoder_update_user(uint8_t index, bool clockwise)
{
    if (clockwise) {
        tap_code(KC_AUDIO_VOL_UP);
    } else {
        tap_code(KC_AUDIO_VOL_DOWN);
    }
	
    return true;
}

void render_logo1(void) {
  static const char PROGMEM my_logo1[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x80, 0xc0, 0x60, 0x60, 0x20, 0x30, 0x10, 0x18, 0x18, 0x0c, 0x06, 0x03, 0x03, 0x07, 
0x1c, 0x18, 0x10, 0x30, 0x30, 0x20, 0x60, 0x60, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xf8, 0x7c, 0x06, 0xd6, 0xe6, 0x1c, 0x0c, 0x3c, 0x3c, 
0x06, 0x03, 0x03, 0x01, 0x00, 0x80, 0xc0, 0xe0, 0xc0, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x06, 0x06, 
0x0c, 0x08, 0x18, 0x18, 0x18, 0x08, 0x0c, 0x8c, 0xfe, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xe4, 0xa4, 0xfe, 0xbe, 0xe6, 0x66, 0x7e, 0xf6, 0x26, 
0xb6, 0xfe, 0xae, 0xe2, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 
0x02, 0x02, 0x04, 0x02, 0x04, 0x04, 0x0d, 0x07, 0x1e, 0x0c, 0x1c, 0x1c, 0x18, 0x38, 0x38, 0x30, 
0x30, 0x60, 0x60, 0x60, 0x60, 0xc0, 0xc1, 0xc1, 0xc0, 0x80, 0x83, 0x83, 0x83, 0x87, 0x07, 0x0e, 
0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7c, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x7f, 0xe3, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa2, 0xb3, 0x99, 0x99, 0xff, 0xee, 0x6a, 0x6a, 0xfb, 
0xdb, 0x88, 0x81, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 
0x03, 0x03, 0x03, 0x06, 0x06, 0x0e, 0x7c, 0xee, 0x83, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0x40, 
0x70, 0x70, 0x70, 0x70, 0x70, 0x60, 0xc0, 0xc0, 0xc1, 0xc7, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

  oled_write_raw_P(my_logo1, sizeof(my_logo1));
}

void render_logo2(void) {
  static const char PROGMEM my_logo2[] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x80, 0xc0, 0xc0, 0x60, 0x60, 0x30, 0x10, 0x18, 0x18, 0x0c, 0x0c, 0x07, 0x03, 0x03, 0x06, 
0x1c, 0x18, 0x30, 0x30, 0x20, 0x60, 0x60, 0x40, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x40, 0x70, 0x30, 0x18, 0x0c, 0x06, 
0x03, 0x03, 0x01, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0x40, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x06, 0x04, 
0x0c, 0x08, 0x18, 0x18, 0x08, 0x0c, 0x0c, 0xc6, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0xe4, 0xa4, 0xfe, 0xbe, 0xe6, 0x66, 0x7e, 0xf6, 0x26, 
0xb6, 0xfe, 0xae, 0xe2, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x02, 0x02, 
0x02, 0x02, 0x84, 0x82, 0x84, 0x6c, 0xfc, 0x8e, 0x03, 0x81, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 
0x40, 0x40, 0x60, 0x60, 0x60, 0xc0, 0xc1, 0xc1, 0xc0, 0x81, 0x83, 0x83, 0x83, 0x87, 0x06, 0x06, 
0x04, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x3c, 0x78, 0xfc, 0xbe, 0x46, 0x9f, 0xc7, 0xa6, 0x1e, 
0x1e, 0x38, 0x20, 0x00, 0x00, 0x00, 0x3e, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xa2, 0xb3, 0x99, 0x99, 0xff, 0xee, 0x6a, 0x6a, 0xfb, 
0xdb, 0x88, 0x81, 0x83, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x05, 0x06, 0x00, 0x00, 0x01, 0x09, 0x1d, 0x09, 0x01, 0x01, 0x01, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 
0x03, 0x03, 0x03, 0x06, 0x06, 0x06, 0x04, 0x0c, 0x0d, 0x0f, 0x0e, 0x0c, 0x18, 0x18, 0x38, 0x38, 
0x30, 0x30, 0x70, 0x70, 0x60, 0x60, 0xc0, 0xc0, 0xc3, 0xdf, 0xfc, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

  oled_write_raw_P(my_logo2, sizeof(my_logo2));
}

bool pic1 = true;
int i = 0;
#ifdef OLED_ENABLE
bool oled_task_user(void)
{
	//if(!rgbOLEDOff) {
	//pic1 = !pic!;
	i++;
	if(i > 350) {
		pic1 = !pic1;
		i = 0;
	}
	
	if(pic1)
		render_logo1();
	else 
		render_logo2();
	//}
	return true;
}
#endif





